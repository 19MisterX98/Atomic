package me.zeroX150.atomic.feature.module.impl.exploit;

import me.zeroX150.atomic.Atomic;
import me.zeroX150.atomic.feature.module.Module;
import me.zeroX150.atomic.feature.module.ModuleType;
import me.zeroX150.atomic.helper.Client;
import me.zeroX150.atomic.helper.event.Events;
import me.zeroX150.atomic.helper.event.PacketEvents;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.entity.EntityPose;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.util.math.Vec3d;

public class VerticalPhase extends Module {
    Vec3d startPos = null;
    float fspeed;

    public VerticalPhase() {
        super("VerticalPhase", "boatphase - boat + y axis", ModuleType.EXPLOIT);
        Events.Packets.registerEventHandler(PacketEvents.PACKET_SEND, event -> {
            if (!this.isEnabled()) return;
            if (event.getPacket() instanceof PlayerMoveC2SPacket) {
                event.setCancelled(true);
            }
        });
    }

    @Override
    public void tick() {
        Vec3d ppos = Atomic.client.player.getPos();
        if (Atomic.client.options.keyJump.isPressed()) {
            Atomic.client.player.updatePosition(startPos.x, ppos.y + 0.05, startPos.z);
        }
        if (Atomic.client.options.keySneak.isPressed()) {
            Atomic.client.player.updatePosition(startPos.x, ppos.y - 0.05, startPos.z);
        }
    }

    @Override
    public void enable() {
        startPos = Atomic.client.player.getPos();
        fspeed = Atomic.client.player.getAbilities().getFlySpeed();
        Atomic.client.player.getAbilities().setFlySpeed(0);
    }

    @Override
    public void disable() {
        Atomic.client.player.noClip = false;
        Atomic.client.player.getAbilities().flying = false;
        Atomic.client.player.getAbilities().setFlySpeed(fspeed);
        Vec3d ppos = Atomic.client.player.getPos();
        Atomic.client.player.updatePosition(ppos.x, ppos.y, ppos.z); // teleport after we stopped blocking movement packets
    }

    @Override
    public String getContext() {
        if (startPos == null) return null;
        return Client.roundToN(Atomic.client.player.getPos().distanceTo(startPos), 1) + "";
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {
        Atomic.client.player.noClip = true;
        Atomic.client.player.getAbilities().flying = true;
        Vec3d p = Atomic.client.player.getPos();
        Atomic.client.player.updatePosition(startPos.x, p.y, startPos.z);
        Atomic.client.player.setVelocity(0, 0, 0);
        Atomic.client.player.setSwimming(false);
        Atomic.client.player.setPose(EntityPose.STANDING);
    }

    @Override
    public void onHudRender() {

    }
}

