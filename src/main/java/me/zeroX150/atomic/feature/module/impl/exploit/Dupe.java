package me.zeroX150.atomic.feature.module.impl.exploit;

import me.zeroX150.atomic.Atomic;
import me.zeroX150.atomic.feature.module.Module;
import me.zeroX150.atomic.feature.module.ModuleType;
import me.zeroX150.atomic.feature.module.config.MultiValue;
import me.zeroX150.atomic.helper.Client;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.BookUpdateC2SPacket;

import java.util.ArrayList;

public class Dupe extends Module {
    MultiValue mode = (MultiValue) this.config.create("Mode", ".d 2", ".d 2", "OMG POPBOB").description("The mode to use while duping");

    public Dupe() {
        super("Dupe", "dupes items on chinese servers", ModuleType.EXPLOIT);
    }

    @Override
    public void tick() {

    }

    @Override
    public void enable() {
        setEnabled(false);
        if (mode.getValue().equalsIgnoreCase(".d 2")) {
            try {
                if (Atomic.client.player.getInventory().getMainHandStack().getItem() != Items.WRITABLE_BOOK) {
                    Client.notifyUser("not sure if you are holding a book ngl");
                    return;
                }
                Client.notifyUser("Signing book with 65500 0x00's");
                BookUpdateC2SPacket b = new BookUpdateC2SPacket(Atomic.client.player.getInventory().selectedSlot, new ArrayList<>(), java.util.Optional.of("\0".repeat(65500)));
                Atomic.client.getNetworkHandler().sendPacket(b);
                Client.notifyUser("Signed book");
            } catch (Exception ignored) {
                Client.notifyUser("Could not sign book. Are you on 1.17.1 rc1+?");
                Client.notifyUser("Your version: " + Atomic.client.getGameVersion());
            }
        } else if (mode.getValue().equalsIgnoreCase("omg popbob")) {
            Client.notifyUser("POPBOB HAS BLESSED YOU WITH THE SEKS DUPE!!!");
            ItemStack stack = Atomic.client.player.getInventory().getMainHandStack();
            if (stack.isEmpty()) {
                stack = new ItemStack(Items.NETHERITE_BLOCK);
            }
            stack.setCount(64);
            for (int i = 0; i < 36; i++) {
                Atomic.client.player.getInventory().setStack(i, stack.copy());
            }
        }
    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return null;
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }
}

