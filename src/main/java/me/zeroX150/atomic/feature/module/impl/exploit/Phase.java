package me.zeroX150.atomic.feature.module.impl.exploit;

import me.zeroX150.atomic.Atomic;
import me.zeroX150.atomic.feature.module.Module;
import me.zeroX150.atomic.feature.module.ModuleType;
import me.zeroX150.atomic.feature.module.config.MultiValue;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.math.Vec3i;

public class Phase extends Module {

    public MultiValue mode;

    public int delay = 0;

    public Phase() {
        super("Phase", "go through walls like a ghost", ModuleType.EXPLOIT);
        mode = this.config.create("Mode", "Vanilla", "Vanilla", "Ground");
        mode.description("The phase mode");
    }

    @Override
    public void tick() {
        assert Atomic.client.player != null;
        assert Atomic.client.world != null;
        if (mode.getValue().equals("Ground") && delay == 0) {
            if (Atomic.client.options.keySneak.isPressed() && Atomic.client.player.verticalCollision) {
                for (int i = Atomic.client.player.getBlockY() - 1; i > 0; i--) {
                    BlockState bs1 = Atomic.client.world.getBlockState(Atomic.client.player.getBlockPos().subtract(new Vec3i(0, Atomic.client.player.getBlockY() - i, 0)));
                    BlockState bs2 = Atomic.client.world.getBlockState(Atomic.client.player.getBlockPos().subtract(new Vec3i(0, Atomic.client.player.getBlockY() - i - 1, 0)));
                    if (!bs1.getMaterial().blocksMovement() && !bs2.getMaterial().blocksMovement() && bs1.getBlock() != Blocks.LAVA && bs2.getBlock() != Blocks.LAVA) {
                        Atomic.client.player.updatePosition(Atomic.client.player.getX(), i, Atomic.client.player.getZ());
                        break;
                    }
                }
                delay = 20;
            }
        }
        if (mode.getValue().equalsIgnoreCase("Vanilla") && Atomic.client.player.horizontalCollision && Atomic.client.options.keySneak.isPressed()) {
            Vec3i v31 = Atomic.client.player.getMovementDirection().getVector();
            Vec3d v3 = new Vec3d(v31.getX(), 0, v31.getZ());
            for (double o = 2; o < 100; o++) {
                Vec3d coff = v3.multiply(o);
                BlockPos cpos = Atomic.client.player.getBlockPos().add(new Vec3i(coff.x, coff.y, coff.z));
                BlockState bs1 = Atomic.client.world.getBlockState(cpos);
                BlockState bs2 = Atomic.client.world.getBlockState(cpos.up());
                if (!bs1.getMaterial().blocksMovement() && !bs2.getMaterial().blocksMovement() && bs1.getBlock() != Blocks.LAVA && bs2.getBlock() != Blocks.LAVA) {
                    Atomic.client.player.updatePosition(cpos.getX() + 0.5, cpos.getY(), cpos.getZ() + 0.5);
                    Atomic.client.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(Atomic.client.player.getX(), Atomic.client.player.getY(), Atomic.client.player.getZ(), false));
                    break;
                }
            }
        }
        if (delay > 0) {
            delay--;
        }
    }

    @Override
    public void enable() {

    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return this.mode.getValue();
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }
}
