package me.zeroX150.atomic.feature.module.impl.exploit;

import me.zeroX150.atomic.Atomic;
import me.zeroX150.atomic.feature.module.Module;
import me.zeroX150.atomic.feature.module.ModuleType;
import me.zeroX150.atomic.feature.module.config.SliderValue;
import me.zeroX150.atomic.helper.event.Events;
import me.zeroX150.atomic.helper.event.PacketEvents;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.Packet;

import java.util.ArrayList;
import java.util.List;

public class PingSpoof extends Module {
    List<PacketEntry> entries = new ArrayList<>();
    List<Packet<?>> dontRepeat = new ArrayList<>();
    SliderValue delay = (SliderValue) this.config.create("Delay in MS", 50, 0, 1000, 0).description("The amount of ms to delay packets by");

    public PingSpoof() {
        super("PingSpoof", "delays packets", ModuleType.EXPLOIT);
        Events.Packets.registerEventHandler(PacketEvents.PACKET_SEND, event -> {
            if (!this.isEnabled()) return;
            if (!dontRepeat.contains(event.getPacket())) {
                event.setCancelled(true);
                entries.add(new PacketEntry(event.getPacket(), delay.getValue()));
            } else dontRepeat.remove(event.getPacket());
        });
    }

    @Override
    public void tick() {
        if (Atomic.client.player == null || Atomic.client.getNetworkHandler() == null) return;
        long c = System.currentTimeMillis();
        for (PacketEntry entry : entries.toArray(new PacketEntry[0])) {
            if (entry.entryTime + entry.delay <= c) {
                dontRepeat.add(entry.packet);
                entries.remove(entry);
                Atomic.client.getNetworkHandler().sendPacket(entry.packet);
            }
        }
    }

    @Override
    public void enable() {
        entries.clear();
        dontRepeat.clear();
    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return delay.getValue() + " ms";
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }

    static class PacketEntry {
        public final Packet<?> packet;
        public final double delay;
        public final long entryTime;

        public PacketEntry(Packet<?> packet, double delay) {
            this.packet = packet;
            this.delay = delay;
            entryTime = System.currentTimeMillis();
        }
    }
}

