package me.zeroX150.atomic.feature.gui.screen;

import me.zeroX150.atomic.Atomic;
import me.zeroX150.atomic.feature.ItemExploits;
import me.zeroX150.atomic.feature.gui.clickgui.ClickGUI;
import net.minecraft.client.gui.DrawableHelper;
import net.minecraft.client.gui.Element;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.client.gui.widget.ButtonWidget;
import net.minecraft.client.gui.widget.TextFieldWidget;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.item.ItemStack;
import net.minecraft.text.Text;

import java.awt.*;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class ItemExploitsScreen extends Screen {
    public ItemExploitsScreen() {
        super(Text.of(""));
    }

    @Override
    protected void init() {
        List<ItemExploits.ItemExploit> sorted = Arrays.stream(ItemExploits.ItemExploit.values()).sorted(Comparator.comparingInt(value -> value.getGenerator().getOptions().length)).collect(Collectors.toList());
        int xOffset = 2;
        int yOffset = 2;
        int width = 200;
        int maxHeightPRow = 0;
        for (ItemExploits.ItemExploit value : sorted) {
            int height = 4 + 9;
            ItemExploits.ExploitGenerator generator = value.getGenerator();
            String d = generator.getDescription();
            if (d != null && !d.isEmpty()) height += 2 + 9;
            height += 2;
            int currentYOff = yOffset + height;
            height += 22 * (generator.getOptions().length + 1);
            maxHeightPRow = Math.max(maxHeightPRow, height);
            for (ItemExploits.Option option : generator.getOptions()) {
                TextFieldWidget w = new TextFieldWidget(textRenderer, xOffset + 2, currentYOff, 196, 20, Text.of("SPECIAL:" + option.getName()));
                w.setMaxLength(65535);
                option.setAssociated(w);
                addDrawableChild(w);
                currentYOff += 22;
            }
            ButtonWidget bw = new ButtonWidget(xOffset + 2, currentYOff, 196, 20, Text.of("Start"), button -> {
                ItemStack stack = generator.exploit();
                if (stack != null) Atomic.client.player.getInventory().addPickBlock(stack);
            });
            addDrawableChild(bw);
            if (xOffset + width + 2 > this.width - 200) {
                yOffset += maxHeightPRow + 2;
                xOffset = 2;
                maxHeightPRow = 0;
            } else xOffset += width + 2;
        }
        super.init();
    }

    @Override
    public void render(MatrixStack matrices, int mouseX, int mouseY, float delta) {
        renderBackground(matrices);
        List<ItemExploits.ItemExploit> sorted = Arrays.stream(ItemExploits.ItemExploit.values()).sorted(Comparator.comparingInt(value -> value.getGenerator().getOptions().length)).collect(Collectors.toList());
        int xOffset = 2;
        int yOffset = 2;
        int width = 200;
        int maxHeightPRow = 0;
        for (ItemExploits.ItemExploit value : sorted) {
            int height = 4 + 9;
            ItemExploits.ExploitGenerator generator = value.getGenerator();
            String d = generator.getDescription();
            if (d != null && !d.isEmpty()) height += 2 + 9;
            height += 2;
            height += 22 * (generator.getOptions().length + 1);
            maxHeightPRow = Math.max(maxHeightPRow, height);
            DrawableHelper.fill(matrices, xOffset, yOffset, xOffset + width, yOffset + height, ClickGUI.ACTIVE.getRGB());
            DrawableHelper.drawCenteredText(matrices, textRenderer, value.getName(), xOffset + (width / 2), yOffset + 2, Color.WHITE.getRGB());
            DrawableHelper.drawCenteredText(matrices, textRenderer, generator.getDescription(), xOffset + (width / 2), yOffset + 4 + 9, Color.WHITE.darker().getRGB());
            if (xOffset + width + 2 > this.width - 200) {
                yOffset += maxHeightPRow + 2;
                xOffset = 2;
                maxHeightPRow = 0;
            } else xOffset += width + 2;
        }
        super.render(matrices, mouseX, mouseY, delta);
    }

    @Override
    public boolean mouseClicked(double mouseX, double mouseY, int button) {
        for (Element child : children()) {
            child.mouseClicked(-1, -1, button);
        }
        return super.mouseClicked(mouseX, mouseY, button);
    }

    @Override
    public boolean isPauseScreen() {
        return false;
    }
}
